services:
  web:
    build:
      context: .
      dockerfile: ./compose/python/Dockerfile
    working_dir: /usr/src/app
    command: bash -c "python manage.py migrate && gunicorn -b 0.0.0.0:8000 --reload --workers 1 --timeout 90 config.wsgi:application"
    volumes:
      - ./app/:/usr/src/app/:delegated
    env_file:
      - ./app/.env
    depends_on:
      - postgres-db
    expose:
      - 8000
    networks:
      - django_network

  postgres-db:
    build:
      context: .
      dockerfile: ./compose/postgres/Dockerfile
    container_name: postgres-db
    env_file:
      - .env.db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - django_network

  celery:
    build:
      context: .
      dockerfile: ./compose/python/Dockerfile
    working_dir: /usr/src/app
    container_name: celery_worker
    env_file:
      - ./app/.env
    depends_on:
      - postgres-db
      - redis
    volumes:
      - ./app/:/usr/src/app/:delegated
    command: celery -A config.celery worker --loglevel=info

  celery-beat:
    build:
      context: .
      dockerfile: ./compose/python/Dockerfile
    working_dir: /usr/src/app
    container_name: celery_beat
    env_file:
      - ./app/.env
    depends_on:
      - postgres-db
      - redis
    volumes:
      - ./app/:/usr/src/app/:delegated
    command: celery -A config.celery beat --loglevel=info

  redis:
    image: redis:7.2-alpine
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./app/static:/usr/src/app/static:ro
    depends_on:
      - web
    networks:
      - django_network

  bot:
    build:
      context: .
      dockerfile: ./compose/python/Dockerfile
    working_dir: /usr/src/bot
    command: bash -c "python main.py"
    container_name: telegram_bot
    restart: always
    env_file:
      - bot/.env.bot
    depends_on:
      - web
    volumes:
      - ./bot/:/usr/src/bot/:delegated
    networks:
      - django_network

volumes:
  postgres_data:

networks:
  django_network:
    driver: bridge
